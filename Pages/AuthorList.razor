@page "/authors"
@inject AuthorService service
@inject NavigationManager navManager

<PageTitle>PWA - Authors</PageTitle>

<h1>Author List</h1>

@if (authors is null)
{
    <p>Loading data...</p>
}
else if (!authors.Any())
{
    <p>No data to show.</p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateAction">Create new author</button>
    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in authors)
            {
                <tr>
                    <th scope="row">@author.Id</th>
                    <td>@author.Name</td>
                    <td>@author.Surname</td>
                    <td>@author.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditAction(author.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeleteAction(author.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="PreviousPage">Prev</button>
    <span>@currentPage</span>
    <button class="btn btn-primary" @onclick="NextPage">Next</button>
}

@code {
    private List<Author>? authors;
    private readonly int dataPerPage = 10;
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        authors = await GetAuthorsAsync();
    }

    protected async Task<List<Author>?> GetAuthorsAsync()
    {
        var response = await service.GetAuthorsAsync();

        if (response is null || !response.Success)
        {
            return null;
        }

        var data = response.Data;

        if (data is null || !data.Any())
        {
            return data;
        }

        totalPages = (data.Count / dataPerPage) + 1;

        if (data.Count % dataPerPage == 0)
        {
            totalPages--;
        }

        if (currentPage > totalPages)
        {
            currentPage--;
        }

        int dataToFetch = currentPage == totalPages && data.Count % dataPerPage != 0 ? data.Count % dataPerPage : dataPerPage;

        return data.GetRange((currentPage - 1) * dataPerPage, dataToFetch);
    }

    protected void CreateAction()
    {
        navManager.NavigateTo($"/authors/create");
    }

    protected void EditAction(int id)
    {
        navManager.NavigateTo($"/authors/{id}");
    }

    protected async Task DeleteAction(int id)
    {
        await service.DeleteAuthorAsync(id);

        authors = await GetAuthorsAsync();
    }

    protected async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;

            authors = await GetAuthorsAsync();
        }
    }
    protected async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;

            authors = await GetAuthorsAsync();
        }
    }
}
